using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using Microsoft.Data.Sqlite;

namespace WindowsFormsApp1
{
    public partial class Form1 : Form
    {
        SqliteCommand sqlCommand;
        // SqliteCommand sqlCommand;

        SqliteConnection sqlConnection;
        // SqlConnection sqlConnection;
        int ID;
        //Список владельцев 
        List<Owner> owners = new List<Owner>();
        List<Space> spaces = new List<Space>();
        public Form1()
        {
            InitializeComponent();
            StartPosition = FormStartPosition.CenterScreen;

        }

        private void Form1_Load(object sender, EventArgs e)
        {
            checkBoxMenu.Visible = false;
            SelectOwners();
            SelectSpaces();
            for (int i = 0; i < owners.Count; i++)
                comboBoxOwners.Items.Add(owners[i].ID);
            ID = (spaces[spaces.Count - 1].Id_space) + 1;
            textBoxIDSpace.Text = ID.ToString();

            //Настройка выпадающего списка 
            comboBoxOwners.DropDownStyle = ComboBoxStyle.DropDownList;
            comboBoxType.DropDownStyle = ComboBoxStyle.DropDownList;
            comboBoxType.SelectedItem = "Квартира";
            /*
            pictureBoxPhoto1.Image = Properties.Resources.logoman028;
            pictureBoxPhoto2.Image = Properties.Resources.logoman028;
            pictureBoxPhoto3.Image = Properties.Resources.logoman028;*/



            //настройка кнопки
            textBoxIDSpace.ReadOnly = true;
        }

        //считывание данных о владельцах
        public void SelectOwners()
        {
            sqlConnection = new SqlConnection("Data Source = HOME-PC\\SQLEXPRESS; Initial Catalog=demo; Integrated Security=True");
            sqlConnection.Open();

            sqlCommand = new SqliteCommand("Select * from owner;", sqlConnection);
            SqliteDataReader sqlDataReader = sqlCommand.ExecuteReader();


            //Если есть строки
            if (sqlDataReader.HasRows)
            {
                while (sqlDataReader.Read())
                {
                    owners.Add(new Owner(Convert.ToInt32(sqlDataReader[0])));
                }
            }
            sqlDataReader.Close();
        }


        public void SelectSpaces()
        {
            sqlConnection = new SqliteConnection("Data Source=C:\\Program Files\\SQLiteStudio\\demo;");
            sqlConnection.Open();

            sqlCommand = new SqliteCommand("Select * from Space", sqlConnection);
            SqliteDataReader sqlDataReader = sqlCommand.ExecuteReader();


            //Если есть строки
            if (sqlDataReader.HasRows)
            {
                while (sqlDataReader.Read())
                {
                    spaces.Add(new Space(Convert.ToInt32(sqlDataReader[0])));
                }
            }
            sqlDataReader.Close();
        }

        private void textBox1_TextChanged(object sender, EventArgs e)
        {

        }

        private void textBox2_TextChanged(object sender, EventArgs e)
        {

        }

        private void openFileDialog1_FileOk(object sender, CancelEventArgs e)
        {

        }


        string imgLocation1 = "";
        string imgLocation2 = "";
        string imgLocation3 = "";
        int countPict = 0;
        private void buttonLoadPictures_Click(object sender, EventArgs e)
        {
            try
            {
                OpenFileDialog openFileDialog = new OpenFileDialog();
                openFileDialog.Filter = "Image Files (*.BMP; *.JPG; *.GIF; *.PNG)|*.BMP;*.JPG;*.GIF; *.PNG|ALL files (*.*)|*.*";
                openFileDialog.InitialDirectory = Application.StartupPath + @"\Pictures";
                openFileDialog.Title = "Выберите фотографии";

                if (openFileDialog.ShowDialog() == DialogResult.OK)
                {
                    if (countPict == 0)
                    {

                        imgLocation1 = openFileDialog.FileName.ToString();
                        pictureBoxPhoto1.ImageLocation = imgLocation1;
                        countPict++;
                    }
                    else if (countPict == 1)
                    {
                        imgLocation2 = openFileDialog.FileName.ToString();
                        pictureBoxPhoto2.ImageLocation = imgLocation2;
                        countPict++;
                    }
                    else
                    {
                        imgLocation3 = openFileDialog.FileName.ToString();
                        pictureBoxPhoto3.ImageLocation = imgLocation3;
                        countPict++;
                    }

                }

            }

            catch
            {
                MessageBox.Show("Ошибка");
            }
        }

        private void comboBoxOwners_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(comboBoxOwners.Text))
            {
                groupBoxRegOwner.Visible = false;
                buttonAddObject.Location = new Point(1300, 165);
                checkBoxMenu.Visible = true;
            }

        }


        private void buttonAddObject_Click(object sender, EventArgs e)
        {
            //добавить в базу квартиру с 3 фото и владельцем, который уже есть в базе данных 
            if (!string.IsNullOrEmpty(textBoxAddress.Text) && !string.IsNullOrWhiteSpace(textBoxAddress.Text) &&
                !string.IsNullOrEmpty(textBoxFloor.Text) && !string.IsNullOrWhiteSpace(textBoxFloor.Text) &&
                !string.IsNullOrEmpty(textBoxArea.Text) && !string.IsNullOrWhiteSpace(textBoxArea.Text) &&
                !string.IsNullOrEmpty(textBoxRooms.Text) && !string.IsNullOrWhiteSpace(textBoxRooms.Text) &&
                !string.IsNullOrEmpty(textBoxPrice.Text) && !string.IsNullOrWhiteSpace(textBoxPrice.Text) &&
                !string.IsNullOrEmpty(textBoxRent.Text) && !string.IsNullOrWhiteSpace(textBoxRent.Text) &&
                !string.IsNullOrEmpty(textBoxDistrict.Text) && !string.IsNullOrWhiteSpace(textBoxDistrict.Text) &&
                !string.IsNullOrEmpty(textBoxYear.Text) && !string.IsNullOrWhiteSpace(textBoxYear.Text))

            {
                //Если в выпадающем списке никто не выбран, значит регистрируем 
                if (comboBoxOwners.SelectedIndex == -1)
                {
                    //Если поля нового владельца заданы
                    if (!string.IsNullOrEmpty(textBoxSur.Text) && !string.IsNullOrWhiteSpace(textBoxSur.Text) &&
                !string.IsNullOrEmpty(textBoxName.Text) && !string.IsNullOrWhiteSpace(textBoxName.Text) &&
                !string.IsNullOrEmpty(textBoxPatr.Text) && !string.IsNullOrWhiteSpace(textBoxPatr.Text) &&
                !string.IsNullOrEmpty(textBoxDr.Text) && !string.IsNullOrWhiteSpace(textBoxDr.Text) &&
                !string.IsNullOrEmpty(textBoxSeria.Text) && !string.IsNullOrWhiteSpace(textBoxSeria.Text) &&
                !string.IsNullOrEmpty(textBoxNumber.Text) && !string.IsNullOrWhiteSpace(textBoxNumber.Text) &&
                !string.IsNullOrEmpty(textBoxPhone.Text) && !string.IsNullOrWhiteSpace(textBoxPhone.Text))

                    {

                        //Если площадь число дробное 
                        double temparea;
                        bool trueint1 = double.TryParse(textBoxArea.Text, out temparea);

                        //Если число комнат целое число
                        int tempRooms;
                        bool trueint2 = int.TryParse(textBoxRooms.Text, out tempRooms);

                        //Если аренда целое число
                        int tempRent;
                        bool trueint3 = int.TryParse(textBoxRent.Text, out tempRent);


                        //Если данные о помещении корректны
                        if (textBoxAddress.Text.Length <= 100 && textBoxFloor.Text.Length <= 50 && trueint1 && trueint2 && trueint3 && textBoxDistrict.Text.Length <= 100)
                        {

                            //Емли серия число
                            int tempSeria;
                            bool trueint4 = int.TryParse(textBoxSeria.Text, out tempSeria);

                            //Если номер число
                            int tempNumber;
                            bool trueint5 = int.TryParse(textBoxNumber.Text, out tempNumber);

                            if (textBoxSur.Text.Length <= 100 && textBoxName.Text.Length <= 50 && textBoxPatr.Text.Length <= 50 && textBoxDr.Text.Length == 10 && trueint4 && trueint5 && textBoxPhone.Text.Length <= 12)
                            {
                                int ser = Convert.ToInt32(textBoxSeria.Text);
                                int numb = Convert.ToInt32(textBoxNumber.Text);

                                if (ser >= 1000 && ser <= 9999 && numb >= 100000 && numb <= 999999)
                                {

                                    try
                                    {
                                        byte[] image1 = null;
                                        byte[] image2 = null;
                                        byte[] image3 = null;

                                        FileStream filestream1 = new FileStream(imgLocation1, FileMode.Open, FileAccess.Read);
                                        BinaryReader binaryReader1 = new BinaryReader(filestream1);
                                        image1 = binaryReader1.ReadBytes((int)filestream1.Length);

                                        FileStream filestream2 = new FileStream(imgLocation2, FileMode.Open, FileAccess.Read);
                                        BinaryReader binaryReader2 = new BinaryReader(filestream2);
                                        image2 = binaryReader2.ReadBytes((int)filestream2.Length);

                                        FileStream filestream3 = new FileStream(imgLocation3, FileMode.Open, FileAccess.Read);
                                        BinaryReader binaryReader3 = new BinaryReader(filestream3);
                                        image3 = binaryReader3.ReadBytes((int)filestream3.Length);

                                        owners.Clear();
                                        //Обновить список владельцев
                                        SelectOwners();
                                        //Авто инкремент айди нового владельца 
                                        int ID_new_owner = (owners[owners.Count - 1].ID) + 1;

                                        char sex;
                                        if (radioButtonMan.Checked == true)
                                            sex = 'м';
                                        else
                                            sex = 'ж';


                                        //новая квартира свободна
                                        bool isUsing = false;
                                        //Запрос в базу 
                                        sqlConnection = new SqlConnection("Data Source = HOME-PC\\SQLEXPRESS; Initial Catalog=demo; Integrated Security=True");
                                        sqlConnection.Open();


                                        //Запрос на добвление данных в таблицу 
                                        sqlCommand = new SqlCommand("Insert Into Owner (Id_owner,Surname,Name,Patronymic,Sex,Birthday,PassportSeries,PassportNumber, Phone)" + "VALUES (@Id_owner,@Surname,@Name,@Patronymic,@Sex,@Birthday,@PassportSeries,@PassportNumber,@Phone)", sqlConnection);

                                        sqlCommand.Parameters.AddWithValue("@Id_owner", ID_new_owner);
                                        sqlCommand.Parameters.AddWithValue("@Surname", textBoxSur.Text);
                                        sqlCommand.Parameters.AddWithValue("@Name", textBoxName.Text);
                                        sqlCommand.Parameters.AddWithValue("@Patronymic", textBoxPatr.Text);
                                        sqlCommand.Parameters.AddWithValue("@Sex", sex);
                                        sqlCommand.Parameters.AddWithValue("@Birthday", textBoxDr.Text);
                                        sqlCommand.Parameters.AddWithValue("@PassportSeries", textBoxSeria.Text);
                                        sqlCommand.Parameters.AddWithValue("@PassportNumber", textBoxNumber.Text);
                                        sqlCommand.Parameters.AddWithValue("@Phone", textBoxPhone.Text);
                                        sqlCommand.ExecuteNonQuery();

                                        //Запрос на добавление помещений 

                                        sqlCommand = new SqlCommand("Insert Into Space (Id_space, Id_Owner, TypeSpace, Address, Floor,Area,Count_rooms,Price, Rent,District,isUsing)" + "VALUES(@Id_space,@Id_Owner,@TypeSpace,@Address,@Floor,@Area,@Count_rooms,@Price,@Rent,@District,@isUsing)", sqlConnection);
                                        sqlCommand.Parameters.AddWithValue("@Id_space", ID);
                                        sqlCommand.Parameters.AddWithValue("@Id_Owner", ID_new_owner);
                                        sqlCommand.Parameters.AddWithValue("@TypeSpace", comboBoxType.Text);
                                        sqlCommand.Parameters.AddWithValue("@Address", textBoxAddress.Text);
                                        sqlCommand.Parameters.AddWithValue("@Floor", textBoxFloor.Text);
                                        sqlCommand.Parameters.AddWithValue("@Area", textBoxArea.Text);
                                        sqlCommand.Parameters.AddWithValue("@Count_rooms", textBoxRooms.Text);
                                        sqlCommand.Parameters.AddWithValue("@Price", textBoxPrice.Text);
                                        sqlCommand.Parameters.AddWithValue("@Rent", textBoxRent.Text);
                                        sqlCommand.Parameters.AddWithValue("@District", textBoxDistrict.Text);
                                        sqlCommand.Parameters.AddWithValue("@isUsing", isUsing);
                                        sqlCommand.ExecuteNonQuery();

                                        //Запрос на добавление фотографий
                                        sqlCommand = new SqlCommand("Insert Into PhotoCatalog (Id_space,Photo1,Photo2,Photo3,Year,Extrainfo)" + "VALUES(@Id_space,@Photo1,@Photo2,@Photo3,@Year,@Extrainfo)", sqlConnection);
                                        sqlCommand.Parameters.AddWithValue("@Id_space", ID);
                                        sqlCommand.Parameters.Add(new SqlParameter("@Photo1", image1));
                                        sqlCommand.Parameters.Add(new SqlParameter("@Photo2", image2));
                                        sqlCommand.Parameters.Add(new SqlParameter("@Photo3", image3));

                                        sqlCommand.Parameters.AddWithValue("@Year", textBoxYear.Text);
                                        sqlCommand.Parameters.AddWithValue("@Extrainfo", textBoxExtraInfo.Text);
                                        sqlCommand.ExecuteNonQuery();

                                        MessageBox.Show("Данные внесены успешно");
                                    }
                                    catch (Exception er)
                                    {
                                        MessageBox.Show(Convert.ToString(er));
                                    }

                                }

                                else
                                    MessageBox.Show("Некорректные паспортные данные ", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Information);

                            }
                            else

                                MessageBox.Show("Некорректные данные о владельце ", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Information);

                        }

                        else

                            MessageBox.Show("Некорректные данные о помещении ", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }

                    else

                        MessageBox.Show("Все данные о владельце должны  быть заполнены", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                else
                { //Если площадь число дробное 
                    double temparea;
                    bool trueint1 = double.TryParse(textBoxArea.Text, out temparea);

                    //Если число комнат целое число
                    int tempRooms;
                    bool trueint2 = int.TryParse(textBoxRooms.Text, out tempRooms);

                    //Если аренда целое число
                    int tempRent;
                    bool trueint3 = int.TryParse(textBoxRent.Text, out tempRent);


                    //Если данные о помещении корректны
                    if (textBoxAddress.Text.Length <= 100 && textBoxFloor.Text.Length <= 50 && trueint1 && trueint2 && trueint3 && textBoxDistrict.Text.Length <= 100)
                    {
                        try
                        {
                            byte[] image1 = null;
                            byte[] image2 = null;
                            byte[] image3 = null;

                            FileStream filestream1 = new FileStream(imgLocation1, FileMode.Open, FileAccess.Read);
                            BinaryReader binaryReader1 = new BinaryReader(filestream1);
                            image1 = binaryReader1.ReadBytes((int)filestream1.Length);

                            FileStream filestream2 = new FileStream(imgLocation2, FileMode.Open, FileAccess.Read);
                            BinaryReader binaryReader2 = new BinaryReader(filestream2);
                            image2 = binaryReader2.ReadBytes((int)filestream2.Length);

                            FileStream filestream3 = new FileStream(imgLocation3, FileMode.Open, FileAccess.Read);
                            BinaryReader binaryReader3 = new BinaryReader(filestream3);
                            image3 = binaryReader3.ReadBytes((int)filestream3.Length);

                            owners.Clear();
                            //Обновить список владельцев
                            SelectOwners();
                            //Авто инкремент айди нового владельца 
                            int ID_new_owner = comboBoxOwners.SelectedIndex;

                            //новая квартира свободна
                            bool isUsing = false;
                            //Запрос в базу 
                            sqlConnection = new SqlConnection("Data Source = HOME-PC\\SQLEXPRESS; Initial Catalog=demo; Integrated Security=True");
                            sqlConnection.Open();

                            //Запрос на добавление помещений 

                            sqlCommand = new SqlCommand("Insert Into Space (Id_space, Id_Owner, TypeSpace, Address, Floor,Area,Count_rooms,Price, Rent,District,isUsing)" + "VALUES(@Id_space,@Id_Owner,@TypeSpace,@Address,@Floor,@Area,@Count_rooms,@Price,@Rent,@District,@isUsing)", sqlConnection);
                            sqlCommand.Parameters.AddWithValue("@Id_space", ID);
                            sqlCommand.Parameters.AddWithValue("@Id_Owner", ID_new_owner);
                            sqlCommand.Parameters.AddWithValue("@TypeSpace", comboBoxType.Text);
                            sqlCommand.Parameters.AddWithValue("@Address", textBoxAddress.Text);
                            sqlCommand.Parameters.AddWithValue("@Floor", textBoxFloor.Text);
                            sqlCommand.Parameters.AddWithValue("@Area", textBoxArea.Text);
                            sqlCommand.Parameters.AddWithValue("@Count_rooms", textBoxRooms.Text);
                            sqlCommand.Parameters.AddWithValue("@Price", textBoxPrice.Text);
                            sqlCommand.Parameters.AddWithValue("@Rent", textBoxRent.Text);
                            sqlCommand.Parameters.AddWithValue("@District", textBoxDistrict.Text);
                            sqlCommand.Parameters.AddWithValue("@isUsing", isUsing);
                            sqlCommand.ExecuteNonQuery();

                            //Запрос на добавление фотографий
                            sqlCommand = new SqlCommand("Insert Into PhotoCatalog (Id_space,Photo1,Photo2,Photo3,Year,Extrainfo)" + "VALUES(@Id_space,@Photo1,@Photo2,@Photo3,@Year,@Extrainfo)", sqlConnection);
                            sqlCommand.Parameters.AddWithValue("@Id_space", ID);
                            sqlCommand.Parameters.Add(new SqlParameter("@Photo1", image1));
                            sqlCommand.Parameters.Add(new SqlParameter("@Photo2", image2));
                            sqlCommand.Parameters.Add(new SqlParameter("@Photo3", image3));

                            sqlCommand.Parameters.AddWithValue("@Year", textBoxYear.Text);
                            sqlCommand.Parameters.AddWithValue("@Extrainfo", textBoxExtraInfo.Text);
                            sqlCommand.ExecuteNonQuery();

                            MessageBox.Show("Данные внесены успешно");
                        }
                        catch (Exception er)
                        {
                            MessageBox.Show(Convert.ToString(er));
                        }
                    }
                    else

                        MessageBox.Show("Некорректные данные о помещении ", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
            else

                MessageBox.Show("Все данные о владельце должны  быть заполнены", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }


        private void checkBoxMenu_CheckedChanged(object sender, EventArgs e)
        {
            comboBoxOwners.SelectedIndex = -1;
            buttonAddObject.Location = new Point(1080, 565);
            groupBoxRegOwner.Visible = true;
            checkBoxMenu.Visible = false;
            checkBoxMenu.Checked = false;

        }

        private void groupBoxPhoto_Enter(object sender, EventArgs e)
        {

        }

        private void comboBoxType_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(comboBoxOwners.Text))
            {
                groupBoxRegOwner.Visible = false;
                buttonAddObject.Location = new Point(1200, 150);
                checkBoxMenu.Visible = true;
            }
        }

        private void label1_Click(object sender, EventArgs e)
        {

        }

        private void buttonLoadPictures_Click_1(object sender, EventArgs e)
        {

        }

        private void groupBoxRegOwner_Enter(object sender, EventArgs e)
        {

        }

        private void label10_Click(object sender, EventArgs e)
        {

        }

    }
}