1 Ключевые слова C#: Ключевые слова в языке C# представляют собой зарезервированные слова, имеющие специальное значение и функциональность. Некоторые из них: class, int, string, if, else, for, while. Контекстные слова - это ключевые слова, используемые для определения контекста или модификации поведения кода в определенной области, например, async, await, partial.

2 Категории типов данных в C#: В C# существуют три основные категории типов данных: значимые типы, ссылочные типы и базовые типы данных. Значимые типы представляют примитивные типы, такие как int, bool, double и другие числовые типы. Ссылочные типы включают классы, интерфейсы, делегаты и массивы. Базовые типы данных включаются из пространства имен System, такие как object и string.

3 Базовые типы данных языка C#: Базовые типы данных в C# включают: bool (логический тип), byte (байт), sbyte (знаковый байт), short (короткое целое), ushort (беззнаковое короткое целое), int (целое), uint (беззнаковое целое), long (длинное целое), ulong (беззнаковое длинное целое), float (число с плавающей запятой), double (число с плавающей запятой двойной точности), decimal (десятичное число), char (символ) и string (строка).

4 Переменные и константы: В C# переменные представляют именованные места в памяти, которые могут хранить значения различных типов данных. Они могут быть изменяемыми. Константы - это именованные значения, которые не могут быть изменены во время выполнения программы. Константы объявляются с использованием ключевого слова const и должны быть инициализированы во время объявления.

5 Базовые операторы: В C# базовые операторы включают операторы присваивания (=), арифметические операторы (+, -, *, /, %), операторы сравнения (==, !=, <, >, <=, >=), логические операторы (&&, ||, !), операторы инкремента (++, --) и др.

6 Условные операторы: В C# условные операторы позволяют выполнять различные действия в зависимости от условий. Оператор if выполняет блок кода, если заданное условие истинно. Оператор switch позволяет выбирать один из нескольких вариантов выполнения кода на основе значения выражения.

7 Операторы цикла: Оператор for используется для выполнения цикла с предусловием, позволяя выполнять блок кода определенное количество раз. Оператор foreach используется для итерации по элементам коллекции или массива и выполнения блока кода для каждого элемента.

8 Операторы цикла: Оператор while выполняет цикл, пока указанное условие истинно. Оператор do-while выполняет цикл, проверяя условие после каждой итерации, поэтому блок кода выполняется хотя бы один раз.

9 Одномерные массивы: Одномерный массив в C# представляет упорядоченную коллекцию элементов одного типа, расположенных в памяти последовательно. Элементы массива доступны по индексам. Пример объявления одномерного массива: int[] numbers = new int[5]; (объявление массива с 5 элементами типа int).

10 Многомерные массивы: Многомерные массивы в C# представляют собой массивы с более чем одним измерением. Например, двумерный массив можно представить как таблицу с рядами и столбцами. Для объявления многомерного массива используется следующий синтаксис: int[,] matrix = new int[3, 3]; (объявление двумерного массива 3x3 элементов типа int).

11 Массивы строк: В C# массивы строк представляют собой одномерные массивы элементов типа string. Они могут хранить наборы символов и используются для работы с текстом. Пример объявления массива строк: string[] names = new string[3]; (объявление массива строк с 3 элементами).

12 Структуры: Структуры в C# представляют пользовательские типы данных, которые могут содержать переменные и методы. Они похожи на классы, но являются значимыми типами данных. Структурные переменные создаются на стеке и копируются при присваивании. Пример объявления структуры: struct Point { public int X; public int Y; }.

13 Свойства: Свойства в C# представляют специальные методы доступа для чтения и записи значений полей класса или структуры. Аксессоры get и set используются для получения и установки значений свойства соответственно. Примеры классов, содержащих свойства: public class Person { public string Name { get; set; } }.

14 Класс: Класс в C# представляет шаблон или определение для создания объектов. Он содержит поля (переменные) и методы (функции), которые определяют поведение и состояние объектов. Описание класса включает ключевое слово class, имя класса и тело класса, которое содержит его члены.

15 Составные элементы класса: В классах C# можно объявлять составные элементы, такие как константные поля, которые имеют постоянное значение и не могут быть изменены после инициализации. Ключевые слова readonly и const используются для объявления константных полей.

16 Класс: Класс в C# представляет шаблон или определение для создания объектов. Он содержит поля (переменные) и методы (функции), которые определяют поведение и состояние объектов. Описание класса включает ключевое слово class, имя класса и тело класса, которое содержит его члены. Ключевое слово this используется для обращения к текущему объекту класса внутри его методов или конструктора.

17 Класс String: Класс String в C# представляет строки и обеспечивает множество методов для работы с ними. Строки в C# являются неизменяемыми объектами, что означает, что операции над строками создают новые строки, а не изменяют исходные. Пример использования класса String: string greeting = "Hello, world!";.

18 Понятие метода: Метод в C# представляет блок кода, который выполняет определенные действия. Он может принимать параметры (входные данные) и возвращать результат с помощью оператора return. Примеры методов в классах: public int Add(int a, int b) { return a + b; } (метод, складывающий два целых числа и возвращающий результат).

19 Понятие метода: Методы в C# могут принимать параметры, которые представляют входные данные для метода. Аргументы - это фактические значения, передаваемые при вызове метода, а формальные параметры - это имена параметров, объявленные в сигнатуре метода. Параметры могут быть переданы по значению, по ссылке или с использованием модификатора out или ref.

20 Рекурсия: Рекурсия в C# представляет собой процесс вызова методом самого себя. Рекурсивные методы могут решать задачи, разделяя их на более простые подзадачи. Примеры рекурсивных методов включают вычисление факториала числа, обход дерева и т. д.

21 Объектно-ориентированное программирование: Объектно-ориентированное программирование (ООП) - это парадигма программирования, которая ориентирована на работу с объектами, которые представляют сущности реального мира. В ООП данные и функциональность объединяются в объекты, которые взаимодействуют друг с другом через методы.

22 Инкапсуляция в классах: Инкапсуляция в классах C# представляет механизм, позволяющий объединить данные и методы внутри класса и скрыть их от внешнего доступа. Ключевые слова private, protected, public, internal используются для указания уровня доступа к членам класса.

23 Наследование: Наследование в C# позволяет создавать новый класс на основе существующего (родительского) класса. Новый класс, называемый производным классом или подклассом, наследует поля и методы родительского класса. При наследовании в классах можно использовать конструкторы с использованием ключевого слова base для инициализации родительского класса.

24 Позднее и раннее связывание: Позднее связывание (полиморфизм) в C# позволяет вызывать методы на основе типа объекта во время выполнения программы. Раннее связывание (статическое связывание) происходит во время компиляции и связано с типом переменной или ссылки.

25 Абстрактный класс: Абстрактный класс в C# представляет базовый класс, который не может быть создан как объект. Он служит в качестве шаблона для производных классов и может содержать как абстрактные методы, так и обычные методы. Абстрактные классы объявляются с использованием ключевого слова abstract.

26 Понятие потока: Поток в C# представляет выполнение некоторого кода в отдельной последовательности инструкций. Он позволяет выполнять несколько задач параллельно или асинхронно. В C# доступно несколько классов для работы с потоками, таких как Thread, Task, ThreadPool.

27 Класс Stream: Класс Stream в C# представляет абстракцию для работы с последовательностью байтов. Он обеспечивает базовый набор методов для чтения, записи и поиска данных в потоке. Некоторые методы чтения: Read, ReadByte. Некоторые методы записи: Write, WriteByte. Некоторые методы поиска: Seek, Position.



** Process exited - Return Code: 0 **
Press Enter to exit terminal